[
  {
    "server": "/api/v2",
    "path": "/signin",
    "operation": "post",
    "operationId": "PostSignin",
    "basicAuth": true,
    "summary": "Create a user session.",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success. User authenticated.",
        "mediaTypes": []
      },
      {
        "code": "401",
        "description": "Unauthorized access.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "403",
        "description": "User account is disabled.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unsuccessful authentication.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/signout",
    "operation": "post",
    "operationId": "PostSignout",
    "basicAuth": false,
    "summary": "Expire the current UI session",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Session successfully expired",
        "mediaTypes": []
      },
      {
        "code": "401",
        "description": "Unauthorized access",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unsuccessful session expiry",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/ping",
    "operation": "get",
    "operationId": "GetPing",
    "basicAuth": false,
    "summary": "Get the status and version of the instance",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "OK.\nHeaders contain InfluxDB version information.\n",
        "mediaTypes": []
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/",
    "operation": "get",
    "operationId": "GetRoutes",
    "basicAuth": false,
    "summary": "List all top level routes",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "default",
        "description": "All routes",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Routes"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dbrps",
    "operation": "get",
    "operationId": "GetDBRPs",
    "basicAuth": false,
    "summary": "List database retention policy mappings",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "Specifies the organization ID to filter on",
        "type": "string"
      },
      {
        "name": "org",
        "description": "Specifies the organization name to filter on",
        "type": "string"
      },
      {
        "name": "id",
        "description": "Specifies the mapping ID to filter on",
        "type": "string"
      },
      {
        "name": "bucketID",
        "description": "Specifies the bucket ID to filter on",
        "type": "string"
      },
      {
        "name": "default",
        "description": "Specifies filtering on default",
        "type": "any"
      },
      {
        "name": "db",
        "description": "Specifies the database to filter on",
        "type": "string"
      },
      {
        "name": "rp",
        "description": "Specifies the retention policy to filter on",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. Returns a list of database retention policy mappings.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "DBRPs"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request. The request has one or more invalid parameters.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dbrps",
    "operation": "post",
    "operationId": "PostDBRP",
    "basicAuth": false,
    "summary": "Add a database retention policy mapping",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The database retention policy mapping to add",
      "required": true,
      "mediaType": "application/json",
      "type": "DBRPCreate"
    },
    "responses": [
      {
        "code": "201",
        "description": "Created. Returns the created database retention policy mapping.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "DBRP"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request. The mapping in the request has one or more invalid IDs.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dbrps/{dbrpID}",
    "operation": "get",
    "operationId": "GetDBRPsID",
    "basicAuth": false,
    "summary": "Retrieve a database retention policy mapping",
    "positionalParams": [
      {
        "name": "dbrpID",
        "description": "The database retention policy mapping ID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "Specifies the organization ID of the mapping",
        "type": "string"
      },
      {
        "name": "org",
        "description": "Specifies the organization name of the mapping",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The database retention policy requested",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "DBRPGet"
          }
        ]
      },
      {
        "code": "400",
        "description": "if any of the IDs passed is invalid",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dbrps/{dbrpID}",
    "operation": "patch",
    "operationId": "PatchDBRPID",
    "basicAuth": false,
    "summary": "Update a database retention policy mapping",
    "positionalParams": [
      {
        "name": "dbrpID",
        "description": "The database retention policy mapping.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "Specifies the organization ID of the mapping",
        "type": "string"
      },
      {
        "name": "org",
        "description": "Specifies the organization name of the mapping",
        "type": "string"
      }
    ],
    "bodyParam": {
      "description": "Database retention policy update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "DBRPUpdate"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated mapping",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "DBRPGet"
          }
        ]
      },
      {
        "code": "400",
        "description": "if any of the IDs passed is invalid",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "404",
        "description": "The mapping was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dbrps/{dbrpID}",
    "operation": "delete",
    "operationId": "DeleteDBRPID",
    "basicAuth": false,
    "summary": "Delete a database retention policy",
    "positionalParams": [
      {
        "name": "dbrpID",
        "description": "The database retention policy mapping",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "Specifies the organization ID of the mapping",
        "type": "string"
      },
      {
        "name": "org",
        "description": "Specifies the organization name of the mapping",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "if any of the IDs passed is invalid",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegraf/plugins",
    "operation": "get",
    "operationId": "GetTelegrafPlugins",
    "basicAuth": false,
    "summary": "List all Telegraf plugins",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "type",
        "description": "The type of plugin desired.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of Telegraf plugins.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "TelegrafPlugins"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs",
    "operation": "get",
    "operationId": "GetTelegrafs",
    "basicAuth": false,
    "summary": "List all Telegraf configurations",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "The organization ID the Telegraf config belongs to.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of Telegraf configurations",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Telegrafs"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs",
    "operation": "post",
    "operationId": "PostTelegrafs",
    "basicAuth": false,
    "summary": "Create a Telegraf configuration",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Telegraf configuration to create",
      "required": true,
      "mediaType": "application/json",
      "type": "TelegrafPluginRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Telegraf configuration created",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Telegraf"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}",
    "operation": "get",
    "operationId": "GetTelegrafsID",
    "basicAuth": false,
    "summary": "Retrieve a Telegraf configuration",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf configuration ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Accept",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Telegraf configuration details",
        "mediaTypes": [
          {
            "mediaType": "application/toml",
            "type": "string"
          },
          {
            "mediaType": "application/json",
            "type": "Telegraf"
          },
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}",
    "operation": "put",
    "operationId": "PutTelegrafsID",
    "basicAuth": false,
    "summary": "Update a Telegraf configuration",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Telegraf configuration update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "TelegrafPluginRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated Telegraf configurations",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Telegraf"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}",
    "operation": "delete",
    "operationId": "DeleteTelegrafsID",
    "basicAuth": false,
    "summary": "Delete a Telegraf configuration",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf configuration ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/labels",
    "operation": "get",
    "operationId": "GetTelegrafsIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a Telegraf config",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of all labels for a Telegraf config",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/labels",
    "operation": "post",
    "operationId": "PostTelegrafsIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a Telegraf config",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Label to add",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "The label added to the Telegraf config",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteTelegrafsIDLabelsID",
    "basicAuth": false,
    "summary": "Delete a label from a Telegraf config",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The label ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Telegraf config not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/members",
    "operation": "get",
    "operationId": "GetTelegrafsIDMembers",
    "basicAuth": false,
    "summary": "List all users with member privileges for a Telegraf config",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of Telegraf config members",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMembers"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/members",
    "operation": "post",
    "operationId": "PostTelegrafsIDMembers",
    "basicAuth": false,
    "summary": "Add a member to a Telegraf config",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User to add as member",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Member added to Telegraf config",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMember"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/members/{userID}",
    "operation": "delete",
    "operationId": "DeleteTelegrafsIDMembersID",
    "basicAuth": false,
    "summary": "Remove a member from a Telegraf config",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the member to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Member removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/owners",
    "operation": "get",
    "operationId": "GetTelegrafsIDOwners",
    "basicAuth": false,
    "summary": "List all owners of a Telegraf configuration",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf configuration ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Returns Telegraf configuration owners as a ResourceOwners list",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwners"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/owners",
    "operation": "post",
    "operationId": "PostTelegrafsIDOwners",
    "basicAuth": false,
    "summary": "Add an owner to a Telegraf configuration",
    "positionalParams": [
      {
        "name": "telegrafID",
        "description": "The Telegraf configuration ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User to add as owner",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Telegraf configuration owner was added. Returns a ResourceOwner that references the User.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwner"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/telegrafs/{telegrafID}/owners/{userID}",
    "operation": "delete",
    "operationId": "DeleteTelegrafsIDOwnersID",
    "basicAuth": false,
    "summary": "Remove an owner from a Telegraf config",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the owner to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "telegrafID",
        "description": "The Telegraf config ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Owner removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables/{variableID}/labels",
    "operation": "get",
    "operationId": "GetVariablesIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a variable",
    "positionalParams": [
      {
        "name": "variableID",
        "description": "The variable ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of all labels for a variable",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables/{variableID}/labels",
    "operation": "post",
    "operationId": "PostVariablesIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a variable",
    "positionalParams": [
      {
        "name": "variableID",
        "description": "The variable ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Label to add",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "The newly added label",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables/{variableID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteVariablesIDLabelsID",
    "basicAuth": false,
    "summary": "Delete a label from a variable",
    "positionalParams": [
      {
        "name": "variableID",
        "description": "The variable ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The label ID to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Variable not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/write",
    "operation": "post",
    "operationId": "PostWrite",
    "basicAuth": false,
    "summary": "Write data",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Content-Encoding",
        "description": "The compression applied to the line protocol in the request payload.\nTo send a GZIP payload, pass `Content-Encoding: gzip` header.\n",
        "type": "string"
      },
      {
        "name": "Content-Type",
        "description": "The format of the data in the request body.\nTo send a line protocol payload, pass `Content-Type: text/plain; charset=utf-8`.\n",
        "type": "string"
      },
      {
        "name": "Content-Length",
        "description": "The size of the entity-body, in bytes, sent to InfluxDB.\nIf the length is greater than the `max body` configuration option,\nthe server responds with status code `413`.\n",
        "type": "number"
      },
      {
        "name": "Accept",
        "description": "The content type that the client can understand.\nWrites only return a response body if they fail--for example,\ndue to a formatting problem or quota limit.\n\n#### InfluxDB Cloud\n\n  - Returns only `application/json` for format and limit errors.\n  - Returns only `text/html` for some quota limit errors.\n\n#### InfluxDB OSS\n\n  - Returns only `application/json` for format and limit errors.\n\n#### Related guides\n  - [Troubleshoot issues writing data](https://docs.influxdata.com/influxdb/v2.3/write-data/troubleshoot/).\n",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "org",
        "description": "The destination organization for writes.\nInfluxDB writes all points in the batch to this organization.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Writes to the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n- InfluxDB writes all points in the batch to this organization.\n",
        "required": true,
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "The ID of the destination organization for writes.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Writes to the bucket in the organization associated with the authorization (API token).\n\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n- InfluxDB writes all points in the batch to this organization.\n",
        "type": "string"
      },
      {
        "name": "bucket",
        "description": "The destination bucket for writes.\nInfluxDB writes all points in the batch to this bucket.\n",
        "required": true,
        "type": "string"
      },
      {
        "name": "precision",
        "description": "The precision for unix timestamps in the line protocol batch.",
        "type": "any"
      }
    ],
    "bodyParam": {
      "description": "Data in line protocol format.\n\nTo send compressed data, do the following:\n\n  1. Use [GZIP](https://www.gzip.org/) to compress the line protocol data.\n  2. In your request, send the compressed data and the\n     `Content-Encoding: gzip` header.\n\n#### Related guides\n\n- [Best practices for optimizing writes](https://docs.influxdata.com/influxdb/v2.3/write-data/best-practices/optimize-writes/).\n",
      "required": true,
      "mediaType": "text/plain",
      "type": "string"
    },
    "responses": [
      {
        "code": "204",
        "description": "Success.\n\n#### InfluxDB Cloud\n\n- Validated and queued the request.\n- Handles the write asynchronously - the write might not have completed yet.\n\n#### InfluxDB OSS\n\n- Successfully wrote all points in the batch.\n\n#### Related guides\n\n- [How to check for write errors](https://docs.influxdata.com/influxdb/v2.3/write-data/troubleshoot/).\n",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request. The response body contains detail about the error.\n\nInfluxDB returns this error if the line protocol data in the request is malformed.\nThe response body contains the first malformed line in the data, and indicates what was expected.\nFor partial writes, the number of points written and the number of points rejected are also included.\nFor more information, check the `rejected_points` measurement in your `_monitoring` bucket.\n\n#### InfluxDB Cloud\n\n- Returns this error for bucket schema conflicts.\n\n#### InfluxDB OSS\n\n- Returns this error if `org` or `orgID` doesn't match an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LineProtocolError"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "413",
        "description": "The request payload is too large.\nInfluxDB rejected the batch and did not write any data.\n\n#### InfluxDB Cloud:\n\n - Returns this error if the payload exceeds the 50MB size limit.\n - Returns `Content-Type: text/html` for this error.\n\n#### InfluxDB OSS:\n\n - Returns this error only if the [Go (golang) `ioutil.ReadAll()`](https://pkg.go.dev/io/ioutil#ReadAll) function raises an error.\n - Returns `Content-Type: application/json` for this error.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LineProtocolLengthError"
          },
          {
            "mediaType": "text/html",
            "type": "string"
          }
        ]
      },
      {
        "code": "429",
        "description": "Too many requests.\n\n#### InfluxDB Cloud\n\n  - Returns this error if a **read** or **write** request exceeds your plan's [adjustable service quotas](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#adjustable-service-quotas)\n    or if a **delete** request exceeds the maximum [global limit](https://docs.influxdata.com/influxdb/cloud/account-management/limits/#global-limits).\n  - For rate limits that reset automatically, returns a `Retry-After` header that describes when to try the write again.\n  - For limits that can't reset (for example, **cardinality limit**), doesn't return a `Retry-After` header.\n\n  Rates (data-in (writes), queries (reads), and deletes) accrue within a fixed five-minute window.\n  Once a rate limit is exceeded, InfluxDB returns an error response until the current five-minute window resets.\n\n#### InfluxDB OSS\n\n  - Doesn't return this error.\n",
        "mediaTypes": []
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "503",
        "description": "Service unavailable.\n\n- Returns this error if\n  the server is temporarily unavailable to accept writes.\n- Returns a `Retry-After` header that describes when to try the write again.\n",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/delete",
    "operation": "post",
    "operationId": "PostDelete",
    "basicAuth": false,
    "summary": "Delete data",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "org",
        "description": "The organization to delete data from.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Deletes data from the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n",
        "type": "string"
      },
      {
        "name": "bucket",
        "description": "The name or ID of the bucket to delete data from.\nIf you pass both `bucket` and `bucketID`, `bucketID` takes precedence.\n",
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "The ID of the organization to delete data from.\nIf you pass both `orgID` and `org`, they must both be valid.\n\n#### InfluxDB Cloud\n\n- Doesn't require `org` or `orgID`.\n- Deletes data from the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n",
        "type": "string"
      },
      {
        "name": "bucketID",
        "description": "The ID of the bucket to delete data from.\nIf you pass both `bucket` and `bucketID`, `bucketID` takes precedence.\n",
        "type": "string"
      }
    ],
    "bodyParam": {
      "description": "Time range parameters and an optional **delete predicate expression**.\n\nTo select points to delete within the specified time range, pass a\n**delete predicate expression** in the `predicate` property of the request body.\nIf you don't pass a `predicate`, InfluxDB deletes all data with timestamps\nin the specified time range.\n\n#### Related guides\n\n- [Delete data](https://docs.influxdata.com/influxdb/v2.3/write-data/delete-data/).\n- Learn how to use [delete predicate syntax](https://docs.influxdata.com/influxdb/v2.3/reference/syntax/delete-predicate/).\n",
      "required": true,
      "mediaType": "application/json",
      "type": "DeletePredicateRequest"
    },
    "responses": [
      {
        "code": "204",
        "description": "Success.\n\n#### InfluxDB Cloud\n\n- Validated and queued the request.\n- Handles the delete asynchronously - the deletion might not have completed yet.\n\nAn HTTP `2xx` status code acknowledges that the write or delete is queued.\nTo ensure that InfluxDB Cloud handles writes and deletes in the order you request them,\nwait for a response before you send the next request.\n\nBecause writes are asynchronous, data might not yet be written\nwhen you receive the response.\n\n#### InfluxDB OSS\n\n- Deleted the data.\n",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if `org` or `orgID` doesn't match an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/labels",
    "operation": "get",
    "operationId": "GetLabels",
    "basicAuth": false,
    "summary": "List all labels",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "The organization ID.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains a list of labels.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/labels",
    "operation": "post",
    "operationId": "PostLabels",
    "basicAuth": false,
    "summary": "Create a label",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "The label to create.",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelCreateRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success. The label was created.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/labels/{labelID}",
    "operation": "get",
    "operationId": "GetLabelsID",
    "basicAuth": false,
    "summary": "Retrieve a label",
    "positionalParams": [
      {
        "name": "labelID",
        "description": "The ID of the label to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the label.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/labels/{labelID}",
    "operation": "patch",
    "operationId": "PatchLabelsID",
    "basicAuth": false,
    "summary": "Update a label",
    "positionalParams": [
      {
        "name": "labelID",
        "description": "The ID of the label to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "A label update.",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelUpdate"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the updated label.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteLabelsID",
    "basicAuth": false,
    "summary": "Delete a label",
    "positionalParams": [
      {
        "name": "labelID",
        "description": "The ID of the label to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success. The delete was accepted.",
        "mediaTypes": []
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}",
    "operation": "get",
    "operationId": "GetDashboardsID",
    "basicAuth": false,
    "summary": "Retrieve a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "include",
        "description": "If `properties`, includes the cell view properties in the response.",
        "required": false,
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Retrieve a single dashboard",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Dashboard | DashboardWithViewProperties"
          }
        ]
      },
      {
        "code": "404",
        "description": "Dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}",
    "operation": "patch",
    "operationId": "PatchDashboardsID",
    "basicAuth": false,
    "summary": "Update a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Patching of a dashboard",
      "required": true,
      "mediaType": "application/json",
      "type": "{\n  /** optional, when provided will replace the name */\n  name?: string;\n  /** optional, when provided will replace the description */\n  description?: string;\n  /** optional, when provided will replace all existing cells with the cells provided */\n  cells?: CellWithViewProperties;\n}"
    },
    "responses": [
      {
        "code": "200",
        "description": "Updated dashboard",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Dashboard"
          }
        ]
      },
      {
        "code": "404",
        "description": "Dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}",
    "operation": "delete",
    "operationId": "DeleteDashboardsID",
    "basicAuth": false,
    "summary": "Delete a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/cells",
    "operation": "post",
    "operationId": "PostDashboardsIDCells",
    "basicAuth": false,
    "summary": "Create a dashboard cell",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Cell that will be added",
      "required": true,
      "mediaType": "application/json",
      "type": "CreateCell"
    },
    "responses": [
      {
        "code": "201",
        "description": "Cell successfully added",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Cell"
          }
        ]
      },
      {
        "code": "404",
        "description": "Dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/cells",
    "operation": "put",
    "operationId": "PutDashboardsIDCells",
    "basicAuth": false,
    "summary": "Replace cells in a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "required": true,
      "mediaType": "application/json",
      "type": "Cells"
    },
    "responses": [
      {
        "code": "201",
        "description": "Replaced dashboard cells",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Dashboard"
          }
        ]
      },
      {
        "code": "404",
        "description": "Dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/cells/{cellID}",
    "operation": "patch",
    "operationId": "PatchDashboardsIDCellsID",
    "basicAuth": false,
    "summary": "Update the non-positional information related to a cell",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to update.",
        "required": true,
        "type": "string"
      },
      {
        "name": "cellID",
        "description": "The ID of the cell to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "required": true,
      "mediaType": "application/json",
      "type": "CellUpdate"
    },
    "responses": [
      {
        "code": "200",
        "description": "Updated dashboard cell",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Cell"
          }
        ]
      },
      {
        "code": "404",
        "description": "Cell or dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/cells/{cellID}",
    "operation": "delete",
    "operationId": "DeleteDashboardsIDCellsID",
    "basicAuth": false,
    "summary": "Delete a dashboard cell",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to delete.",
        "required": true,
        "type": "string"
      },
      {
        "name": "cellID",
        "description": "The ID of the cell to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Cell successfully deleted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Cell or dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/cells/{cellID}/view",
    "operation": "get",
    "operationId": "GetDashboardsIDCellsIDView",
    "basicAuth": false,
    "summary": "Retrieve the view for a cell",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "cellID",
        "description": "The cell ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A dashboard cells view",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "View"
          }
        ]
      },
      {
        "code": "404",
        "description": "Cell or dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/cells/{cellID}/view",
    "operation": "patch",
    "operationId": "PatchDashboardsIDCellsIDView",
    "basicAuth": false,
    "summary": "Update the view for a cell",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The ID of the dashboard to update.",
        "required": true,
        "type": "string"
      },
      {
        "name": "cellID",
        "description": "The ID of the cell to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "required": true,
      "mediaType": "application/json",
      "type": "View"
    },
    "responses": [
      {
        "code": "200",
        "description": "Updated cell view",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "View"
          }
        ]
      },
      {
        "code": "404",
        "description": "Cell or dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/labels",
    "operation": "get",
    "operationId": "GetDashboardsIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of all labels for a dashboard",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/labels",
    "operation": "post",
    "operationId": "PostDashboardsIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Label to add",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "The label added to the dashboard",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteDashboardsIDLabelsID",
    "basicAuth": false,
    "summary": "Delete a label from a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The ID of the label to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Dashboard not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/members",
    "operation": "get",
    "operationId": "GetDashboardsIDMembers",
    "basicAuth": false,
    "summary": "List all dashboard members",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of users who have member privileges for a dashboard",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMembers"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/members",
    "operation": "post",
    "operationId": "PostDashboardsIDMembers",
    "basicAuth": false,
    "summary": "Add a member to a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User to add as member",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Added to dashboard members",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMember"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/members/{userID}",
    "operation": "delete",
    "operationId": "DeleteDashboardsIDMembersID",
    "basicAuth": false,
    "summary": "Remove a member from a dashboard",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the member to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Member removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/owners",
    "operation": "get",
    "operationId": "GetDashboardsIDOwners",
    "basicAuth": false,
    "summary": "List all dashboard owners",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of users who have owner privileges for a dashboard",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwners"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/owners",
    "operation": "post",
    "operationId": "PostDashboardsIDOwners",
    "basicAuth": false,
    "summary": "Add an owner to a dashboard",
    "positionalParams": [
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User to add as owner",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Added to dashboard owners",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwner"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards/{dashboardID}/owners/{userID}",
    "operation": "delete",
    "operationId": "DeleteDashboardsIDOwnersID",
    "basicAuth": false,
    "summary": "Remove an owner from a dashboard",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the owner to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "dashboardID",
        "description": "The dashboard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Owner removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/query/ast",
    "operation": "post",
    "operationId": "PostQueryAst",
    "basicAuth": false,
    "summary": "Generate a query Abstract Syntax Tree (AST)",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Content-Type",
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The Flux query to analyze.",
      "required": false,
      "mediaType": "application/json",
      "type": "LanguageRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains an Abstract Syntax Tree (AST) of the Flux query.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ASTResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nInfluxDB is unable to parse the request.\nThe response body contains detail about the problem.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Internal server error.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/query/suggestions",
    "operation": "get",
    "operationId": "GetQuerySuggestions",
    "basicAuth": false,
    "summary": "Retrieve Flux query suggestions",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains a list of Flux query suggestions--function\nnames used in the Flux Query Builder autocomplete suggestions.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "FluxSuggestions"
          }
        ]
      },
      {
        "code": "301",
        "description": "Moved Permanently.\nInfluxData has moved the URL of the endpoint.\nUse `/api/v2/query/suggestions`.\n",
        "mediaTypes": [
          {
            "mediaType": "text/html",
            "type": "{\n  /** Response message with URL of requested resource. */\n  readonly body?: string;\n}"
          }
        ]
      },
      {
        "code": "default",
        "description": "Internal server error.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/query/suggestions/{name}",
    "operation": "get",
    "operationId": "GetQuerySuggestionsName",
    "basicAuth": false,
    "summary": "Retrieve a query suggestion for a branching suggestion",
    "positionalParams": [
      {
        "name": "name",
        "description": "A Flux Function name.\nOnly returns functions with this name.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the function name and parameters.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "FluxSuggestion"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe value passed for _`name`_ may have been misspelled.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/query/analyze",
    "operation": "post",
    "operationId": "PostQueryAnalyze",
    "basicAuth": false,
    "summary": "Analyze a Flux query",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Content-Type",
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Flux query to analyze",
      "required": false,
      "mediaType": "application/json",
      "type": "Query"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the list of `errors`.\nIf the query syntax is valid, the endpoint returns an empty `errors` list.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "AnalyzeQueryResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nInfluxDB is unable to parse the request.\nThe response body contains detail about the problem.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Internal server error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/query",
    "operation": "post",
    "operationId": "PostQuery",
    "basicAuth": false,
    "summary": "Query data",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Accept-Encoding",
        "description": "The content encoding (usually a compression algorithm) that the client can understand.",
        "type": "string"
      },
      {
        "name": "Content-Type",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "org",
        "description": "The name or ID of the organization executing the query.\n\n#### InfluxDB Cloud\n\n- Doesn't use `org` or `orgID`.\n- Queries the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n",
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "The ID of the organization executing the query.\n\n#### InfluxDB Cloud\n\n- Doesn't use `org` or `orgID`.\n- Queries the bucket in the organization associated with the authorization (API token).\n\n#### InfluxDB OSS\n\n- Requires either `org` or `orgID`.\n",
        "type": "string"
      }
    ],
    "bodyParam": {
      "description": "Flux query or specification to execute",
      "required": false,
      "mediaType": "application/json",
      "type": "Query"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains query results.",
        "mediaTypes": [
          {
            "mediaType": "application/csv",
            "type": "string"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if `org` or `orgID` doesn't match an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "429",
        "description": "#### InfluxDB Cloud:\n  - returns this error if a **read** or **write** request exceeds your\n    plan's [adjustable service quotas](https://docs.influxdata.com/influxdb/v2.3/account-management/limits/#adjustable-service-quotas)\n    or if a **delete** request exceeds the maximum\n    [global limit](https://docs.influxdata.com/influxdb/v2.3/account-management/limits/#global-limits)\n  - returns `Retry-After` header that describes when to try the write again.\n\n#### InfluxDB OSS:\n  - doesn't return this error.\n",
        "mediaTypes": []
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets",
    "operation": "get",
    "operationId": "GetBuckets",
    "basicAuth": false,
    "summary": "List buckets",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "offset",
        "description": "The offset for pagination.\nThe number of records to skip.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "limit",
        "description": "Limits the number of records returned. Default is `20`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "after",
        "description": "Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "org",
        "description": "Organization name.\nThe name of the organization.\n\n#### InfluxDB Cloud\n\n - Doesn't use `org` or `orgID`.\n - Creates a bucket in the organization associated with the authorization (API token).\n\n #### InfluxDB OSS\n\n - Accepts either `org` or `orgID`.\n - InfluxDB creates the bucket within this organization.\n",
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "Organization ID.\nThe organization ID.\n\n#### InfluxDB Cloud\n\n - Doesn't use `org` or `orgID`.\n - Creates a bucket in the organization associated with the authorization (API token).\n\n #### InfluxDB OSS\n\n - Accepts either `org` or `orgID`.\n - InfluxDB creates the bucket within this organization.\n",
        "type": "string"
      },
      {
        "name": "name",
        "description": "Bucket name.\nOnly returns buckets with this specific name.\n",
        "type": "string"
      },
      {
        "name": "id",
        "description": "Bucket ID.\nOnly returns the bucket with this ID.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains a list of buckets.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Buckets"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets",
    "operation": "post",
    "operationId": "PostBuckets",
    "basicAuth": false,
    "summary": "Create a bucket",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Bucket to create",
      "required": true,
      "mediaType": "application/json",
      "type": "PostBucketRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success.\nThe bucket was created.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Bucket"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "403",
        "description": "Forbidden.\nThe bucket quota is exceeded.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable Entity.\nThe request body failed validation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}",
    "operation": "get",
    "operationId": "GetBucketsID",
    "basicAuth": false,
    "summary": "Retrieve a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The ID of the bucket to retrieve.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the bucket information.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Bucket"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nBucket not found.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}",
    "operation": "patch",
    "operationId": "PatchBucketsID",
    "basicAuth": false,
    "summary": "Update a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The bucket ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The bucket update to apply.",
      "required": true,
      "mediaType": "application/json",
      "type": "PatchBucketRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated bucket",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Bucket"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad Request.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "403",
        "description": "Forbidden.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nBucket not found.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}",
    "operation": "delete",
    "operationId": "DeleteBucketsID",
    "basicAuth": false,
    "summary": "Delete a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "Bucket ID.\nThe ID of the bucket to delete.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success.\n\n#### InfluxDB Cloud\n  - The bucket is queued for deletion.\n\n#### InfluxDB OSS\n  - The bucket is deleted.\n",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad Request.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nBucket not found.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/labels",
    "operation": "get",
    "operationId": "GetBucketsIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The ID of the bucket to retrieve labels for.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains a list of all labels for the bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/labels",
    "operation": "post",
    "operationId": "PostBucketsIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "Bucket ID.\nThe ID of the bucket to label.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "An object that contains a _`labelID`_ to add to the bucket.",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success.\nThe response body contains the label information.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\nLabel already exists on the resource.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteBucketsIDLabelsID",
    "basicAuth": false,
    "summary": "Delete a label from a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The bucket ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The ID of the label to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Bucket not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/members",
    "operation": "get",
    "operationId": "GetBucketsIDMembers",
    "basicAuth": false,
    "summary": "List all users with member privileges for a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The ID of the bucket to retrieve users for.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains a list of all users for the bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMembers"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/members",
    "operation": "post",
    "operationId": "PostBucketsIDMembers",
    "basicAuth": false,
    "summary": "Add a member to a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The ID of the bucket to retrieve users for.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "A user to add as a member to the bucket.",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success.\nThe response body contains the user information.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMember"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/members/{userID}",
    "operation": "delete",
    "operationId": "DeleteBucketsIDMembersID",
    "basicAuth": false,
    "summary": "Remove a member from a bucket",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the user to remove.\n",
        "required": true,
        "type": "string"
      },
      {
        "name": "bucketID",
        "description": "The ID of the bucket to remove a user from.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success.\nThe user is no longer a member of the bucket.\n",
        "mediaTypes": []
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/owners",
    "operation": "get",
    "operationId": "GetBucketsIDOwners",
    "basicAuth": false,
    "summary": "List all owners of a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The bucket ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of bucket owners",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwners"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/owners",
    "operation": "post",
    "operationId": "PostBucketsIDOwners",
    "basicAuth": false,
    "summary": "Add an owner to a bucket",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The bucket ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User to add as owner",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success. The user is an owner of the bucket",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwner"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/buckets/{bucketID}/owners/{userID}",
    "operation": "delete",
    "operationId": "DeleteBucketsIDOwnersID",
    "basicAuth": false,
    "summary": "Remove an owner from a bucket",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the owner to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "bucketID",
        "description": "The bucket ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Owner removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs",
    "operation": "get",
    "operationId": "GetOrgs",
    "basicAuth": false,
    "summary": "List organizations",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "offset",
        "description": "The offset for pagination.\nThe number of records to skip.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "limit",
        "description": "Limits the number of records returned. Default is `20`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "descending",
        "required": false,
        "type": "any"
      },
      {
        "name": "org",
        "description": "An organization name.\nOnly returns organizations with this name.\n",
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "An organization ID.\nOnly returns the organization with this ID.\n",
        "type": "string"
      },
      {
        "name": "userID",
        "description": "A user ID.\nOnly returns organizations where this user is a member or owner.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains a list of organizations.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Organizations"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs",
    "operation": "post",
    "operationId": "PostOrgs",
    "basicAuth": false,
    "summary": "Create an organization",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The organization to create.",
      "required": true,
      "mediaType": "application/json",
      "type": "PostOrganizationRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Created. The response body contains the organization information.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Organization"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}",
    "operation": "get",
    "operationId": "GetOrgsID",
    "basicAuth": false,
    "summary": "Retrieve an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization to retrieve.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the organization information.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Organization"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nOrganization not found.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}",
    "operation": "patch",
    "operationId": "PatchOrgsID",
    "basicAuth": false,
    "summary": "Update an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization to update.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The organization update to apply.",
      "required": true,
      "mediaType": "application/json",
      "type": "PatchOrganizationRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the updated organization.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Organization"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}",
    "operation": "delete",
    "operationId": "DeleteOrgsID",
    "basicAuth": false,
    "summary": "Delete an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization to delete.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success.\n\n#### InfluxDB Cloud\n  - The organization is queued for deletion.\n\n#### InfluxDB OSS\n  - The organization is deleted.\n",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nInfluxDB can't find the organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/secrets",
    "operation": "get",
    "operationId": "GetOrgsIDSecrets",
    "basicAuth": false,
    "summary": "List all secret keys for an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The organization ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of all secret keys",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "SecretKeysResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/secrets",
    "operation": "patch",
    "operationId": "PatchOrgsIDSecrets",
    "basicAuth": false,
    "summary": "Update secrets in an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The organization ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Secret key value pairs to update/add",
      "required": true,
      "mediaType": "application/json",
      "type": "Secrets"
    },
    "responses": [
      {
        "code": "204",
        "description": "Keys successfully patched",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/members",
    "operation": "get",
    "operationId": "GetOrgsIDMembers",
    "basicAuth": false,
    "summary": "List all members of an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization to retrieve users for.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains a list of all users within the organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMembers"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nInfluxDB can't find the organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/members",
    "operation": "post",
    "operationId": "PostOrgsIDMembers",
    "basicAuth": false,
    "summary": "Add a member to an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The user to add to the organization.\n",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success.\nThe response body contains the user information.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMember"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/members/{userID}",
    "operation": "delete",
    "operationId": "DeleteOrgsIDMembersID",
    "basicAuth": false,
    "summary": "Remove a member from an organization",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the user to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "The ID of the organization to remove a user from.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success.\nThe user is no longer a member of the organization.\n",
        "mediaTypes": []
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/owners",
    "operation": "get",
    "operationId": "GetOrgsIDOwners",
    "basicAuth": false,
    "summary": "List all owners of an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization to list owners for.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of organization owners",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwners"
          }
        ]
      },
      {
        "code": "404",
        "description": "Organization not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/owners",
    "operation": "post",
    "operationId": "PostOrgsIDOwners",
    "basicAuth": false,
    "summary": "Add an owner to an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization that you want to add an owner for.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The user to add as an owner of the organization.",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success. The user is an owner of the organization.\nThe response body contains the owner with role and user detail.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwner"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/owners/{userID}",
    "operation": "delete",
    "operationId": "DeleteOrgsIDOwnersID",
    "basicAuth": false,
    "summary": "Remove an owner from an organization",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the user to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "The ID of the organization to remove an owner from.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success.\nThe user is no longer an owner of the organization.\n",
        "mediaTypes": []
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/secrets/delete",
    "operation": "post",
    "operationId": "PostOrgsIDSecrets",
    "basicAuth": false,
    "summary": "Delete secrets from an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The organization ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Secret key to delete",
      "required": true,
      "mediaType": "application/json",
      "type": "SecretKeys"
    },
    "responses": [
      {
        "code": "204",
        "description": "Keys successfully patched",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/orgs/{orgID}/secrets/{secretID}",
    "operation": "delete",
    "operationId": "DeleteOrgsIDSecretsID",
    "basicAuth": false,
    "summary": "Delete a secret from an organization",
    "positionalParams": [
      {
        "name": "orgID",
        "description": "The organization ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "secretID",
        "description": "The secret ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Keys successfully deleted",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/resources",
    "operation": "get",
    "operationId": "GetResources",
    "basicAuth": false,
    "summary": "List all known resources",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "All resources targets",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "string[]"
          }
        ]
      },
      {
        "code": "default",
        "description": "Internal server error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/stacks",
    "operation": "get",
    "operationId": "ListStacks",
    "basicAuth": false,
    "summary": "List installed stacks",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [
      {
        "name": "orgID",
        "description": "The ID of the organization that owns the stacks.\nOnly returns stacks owned by this organization.\n\n#### InfluxDB Cloud\n\n- Doesn't require this parameter;\n  InfluxDB only returns resources allowed by the API token.\n",
        "required": true,
        "type": "string"
      },
      {
        "name": "name",
        "description": "The stack name.\nFinds stack `events` with this name and returns the stacks.\n\nRepeatable.\nTo filter for more than one stack name,\nrepeat this parameter with each name--for example:\n\n- `http://localhost:8086/api/v2/stacks?&orgID=INFLUX_ORG_ID&name=project-stack-0&name=project-stack-1`\n",
        "type": "string"
      },
      {
        "name": "stackID",
        "description": "The stack ID.\nOnly returns stacks with this ID.\n\nRepeatable.\nTo filter for more than one stack ID,\nrepeat this parameter with each ID--for example:\n\n- `http://localhost:8086/api/v2/stacks?&orgID=INFLUX_ORG_ID&stackID=09bd87cd33be3000&stackID=09bef35081fe3000`\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the list of stacks.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  stacks?: Stack[];\n}"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/stacks",
    "operation": "post",
    "operationId": "CreateStack",
    "basicAuth": false,
    "summary": "Create a stack",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "The stack to create.",
      "required": true,
      "mediaType": "application/json",
      "type": "{\n  orgID?: string;\n  name?: string;\n  description?: string;\n  urls?: string[];\n}"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success. Returns the newly created stack.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Stack"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\n\nThe error may indicate one of the following problems:\n\n- The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n- You passed a parameter combination that InfluxDB doesn't support.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/stacks/{stack_id}",
    "operation": "get",
    "operationId": "ReadStack",
    "basicAuth": false,
    "summary": "Retrieve a stack",
    "positionalParams": [
      {
        "name": "stack_id",
        "description": "The identifier of the stack.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Returns the stack.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Stack"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/stacks/{stack_id}",
    "operation": "patch",
    "operationId": "UpdateStack",
    "basicAuth": false,
    "summary": "Update a stack",
    "positionalParams": [
      {
        "name": "stack_id",
        "description": "The identifier of the stack.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "The stack to update.",
      "required": true,
      "mediaType": "application/json",
      "type": "{\n  name?: string;\n  description?: string;\n  templateURLs?: string[];\n  additionalResources?: Array<{\n  resourceID: string;\n  kind: string;\n  templateMetaName?: string;\n}>;\n}"
    },
    "responses": [
      {
        "code": "200",
        "description": "Returns the updated stack.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Stack"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/stacks/{stack_id}",
    "operation": "delete",
    "operationId": "DeleteStack",
    "basicAuth": false,
    "summary": "Delete a stack and associated resources",
    "positionalParams": [
      {
        "name": "stack_id",
        "description": "The identifier of the stack.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [
      {
        "name": "orgID",
        "description": "The identifier of the organization.",
        "required": true,
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "The stack and its associated resources were deleted.",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/stacks/{stack_id}/uninstall",
    "operation": "post",
    "operationId": "UninstallStack",
    "basicAuth": false,
    "summary": "Uninstall a stack",
    "positionalParams": [
      {
        "name": "stack_id",
        "description": "The identifier of the stack.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Returns the uninstalled stack.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Stack"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/templates/apply",
    "operation": "post",
    "operationId": "ApplyTemplate",
    "basicAuth": false,
    "summary": "Apply or dry-run a template",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "Parameters for applying templates.\n",
      "required": true,
      "mediaType": "application/json",
      "type": "TemplateApply"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe template dry run succeeded.\nThe response body contains a resource diff of changes that the\ntemplate would have made if installed.\nNo resources were created or updated.\nThe diff and summary won't contain IDs for resources\nthat didn't exist at the time of the dry run.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "TemplateSummary"
          }
        ]
      },
      {
        "code": "201",
        "description": "Success.\nThe template applied successfully.\nThe response body contains the stack ID, a diff, and a summary.\nThe diff compares the initial state to the state after the template installation.\nThe summary contains newly created resources.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "TemplateSummary"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\n\n\nThe error may indicate one of the following problems:\n\n- The template failed validation.\n- You passed a parameter combination that InfluxDB doesn't support.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "TemplateSummary & {\n  message: string;\n  code: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\n\n#### InfluxDB Cloud\n\n- Returns this error if creating one of the template\n  resources (bucket, dashboard, task, user) exceeds your plan’s\n  adjustable service quotas.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/templates/export",
    "operation": "post",
    "operationId": "ExportTemplate",
    "basicAuth": false,
    "summary": "Export a new template",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "Export resources as an InfluxDB template.",
      "required": false,
      "mediaType": "application/json",
      "type": "TemplateExportByID | TemplateExportByName"
    },
    "responses": [
      {
        "code": "200",
        "description": "The template was created successfully. Returns the newly created template.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Template"
          },
          {
            "mediaType": "application/x-yaml",
            "type": "Template"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/runs",
    "operation": "get",
    "operationId": "GetTasksIDRuns",
    "basicAuth": false,
    "summary": "List runs for a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to get runs for.\nOnly returns runs for this task.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "after",
        "description": "A task run ID. Only returns runs created after this run.",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "Limits the number of task runs returned. Default is `100`.\n",
        "type": "number"
      },
      {
        "name": "afterTime",
        "description": "A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\nOnly returns runs scheduled after this time.\n",
        "type": "string"
      },
      {
        "name": "beforeTime",
        "description": "A timestamp ([RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp)).\nOnly returns runs scheduled before this time.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the list of task runs.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Runs"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/runs",
    "operation": "post",
    "operationId": "PostTasksIDRuns",
    "basicAuth": false,
    "summary": "Start a task run, overriding the schedule",
    "positionalParams": [
      {
        "name": "taskID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "required": false,
      "mediaType": "application/json",
      "type": "RunManually"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success. The run is scheduled to start.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Run"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/runs/{runID}",
    "operation": "get",
    "operationId": "GetTasksIDRunsID",
    "basicAuth": false,
    "summary": "Retrieve a run for a task.",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to retrieve runs for.",
        "required": true,
        "type": "string"
      },
      {
        "name": "runID",
        "description": "The ID of the run to retrieve.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the task run.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Run"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/runs/{runID}",
    "operation": "delete",
    "operationId": "DeleteTasksIDRunsID",
    "basicAuth": false,
    "summary": "Cancel a running task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to cancel.",
        "required": true,
        "type": "string"
      },
      {
        "name": "runID",
        "description": "The ID of the task run to cancel.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success. The `DELETE` is accepted and the run will be cancelled.\n\n#### InfluxDB Cloud\n\n- Doesn't support this operation.\n- Doesn't return this status.\n",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "405",
        "description": "Method not allowed.\n\n#### InfluxDB Cloud\n\n  - Always returns this error; doesn't support cancelling tasks.\n\n#### InfluxDB OSS\n\n  - Doesn't return this error.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/runs/{runID}/retry",
    "operation": "post",
    "operationId": "PostTasksIDRunsIDRetry",
    "basicAuth": false,
    "summary": "Retry a task run",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task)  ID.\nSpecifies the task to retry.\n",
        "required": true,
        "type": "string"
      },
      {
        "name": "runID",
        "description": "A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) run ID.\nSpecifies the task run to retry.\n\nTo find a task run ID, use the\n[`GET /api/v2/tasks/{taskID}/runs` endpoint](#operation/GetTasksIDRuns)\nto list task runs.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "required": false,
      "mediaType": "application/json; charset=utf-8",
      "type": "any"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the queued run.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Run"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\nInfluxDB may return this error for the following reasons:\n\n- The task has `status: inactive`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/logs",
    "operation": "get",
    "operationId": "GetTasksIDLogs",
    "basicAuth": false,
    "summary": "Retrieve all logs for a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The task ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains an `events` list with logs for the task.\nEach log event `message` contains detail about the event.\nIf a task run fails, InfluxDB logs an event with the reason for the failure.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Logs"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/runs/{runID}/logs",
    "operation": "get",
    "operationId": "GetTasksIDRunsIDLogs",
    "basicAuth": false,
    "summary": "Retrieve all logs for a run",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to get logs for.",
        "required": true,
        "type": "string"
      },
      {
        "name": "runID",
        "description": "The ID of the run to get logs for.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains an `events` list with logs for the task run.\nEach log event `message` contains detail about the event.\nIf a run fails, InfluxDB logs an event with the reason for the failure.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Logs"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/labels",
    "operation": "get",
    "operationId": "GetTasksIDLabels",
    "basicAuth": false,
    "summary": "List labels for a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to retrieve labels for.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains a list of all labels for the task.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/labels",
    "operation": "post",
    "operationId": "PostTasksIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to label.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "An object that contains a _`labelID`_ to add to the task.",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success. The response body contains a list of all labels for the task.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteTasksIDLabelsID",
    "basicAuth": false,
    "summary": "Delete a label from a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to delete the label from.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The ID of the label to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success. The label is deleted.",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/flags",
    "operation": "get",
    "operationId": "GetFlags",
    "basicAuth": false,
    "summary": "Return the feature flags for the currently authenticated user",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Feature flags for the currently authenticated user",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Flags"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/me",
    "operation": "get",
    "operationId": "GetMe",
    "basicAuth": false,
    "summary": "Retrieve the currently authenticated user",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the currently authenticated user.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "UserResponse"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/me/password",
    "operation": "put",
    "operationId": "PutMePassword",
    "basicAuth": true,
    "summary": "Update a password",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The new password.",
      "required": true,
      "mediaType": "application/json",
      "type": "PasswordResetBody"
    },
    "responses": [
      {
        "code": "204",
        "description": "Success. The password was updated.",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request.\nInfluxDB Cloud doesn't support changing passwords through the API and always responds with this status.\n",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unsuccessful authentication",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/members",
    "operation": "get",
    "operationId": "GetTasksIDMembers",
    "basicAuth": false,
    "summary": "List all task members",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The task ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains a list of `users` that have\nthe `member` role for a task.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMembers"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/members",
    "operation": "post",
    "operationId": "PostTasksIDMembers",
    "basicAuth": false,
    "summary": "Add a member to a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The task ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "A user to add as a member of the task.",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Created. The user is added to task members.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMember"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/members/{userID}",
    "operation": "delete",
    "operationId": "DeleteTasksIDMembersID",
    "basicAuth": false,
    "summary": "Remove a member from a task",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the member to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "taskID",
        "description": "The task ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Member removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/owners",
    "operation": "get",
    "operationId": "GetTasksIDOwners",
    "basicAuth": false,
    "summary": "List all owners of a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to retrieve owners for.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response contains a list of `users` that have the `owner` role for the task.\n\nIf the task has no owners, the response contains an empty `users` array.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwners"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\n\nThe error may indicate one of the following problems:\n\n- The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n- You passed a parameter combination that InfluxDB doesn't support.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/owners",
    "operation": "post",
    "operationId": "PostTasksIDOwners",
    "basicAuth": false,
    "summary": "Add an owner for a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The task ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "A user to add as an owner of the task.",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Created. The task `owner` role is assigned to the user.\nThe response body contains the resource owner with\nrole and user detail.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwner"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\n\nThe error may indicate one of the following problems:\n\n- The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n- You passed a parameter combination that InfluxDB doesn't support.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}/owners/{userID}",
    "operation": "delete",
    "operationId": "DeleteTasksIDOwnersID",
    "basicAuth": false,
    "summary": "Remove an owner from a task",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the owner to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "taskID",
        "description": "The task ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Owner removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/users/{userID}/password",
    "operation": "post",
    "operationId": "PostUsersIDPassword",
    "basicAuth": true,
    "summary": "Update a password",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The user ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "New password",
      "required": true,
      "mediaType": "application/json",
      "type": "PasswordResetBody"
    },
    "responses": [
      {
        "code": "204",
        "description": "Password successfully updated",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request.\nInfluxDB Cloud doesn't support changing passwords through the API and always responds with this status.\n",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unsuccessful authentication",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks",
    "operation": "get",
    "operationId": "GetChecks",
    "basicAuth": false,
    "summary": "List all checks",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "offset",
        "description": "The offset for pagination.\nThe number of records to skip.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "limit",
        "description": "Limits the number of records returned. Default is `20`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "orgID",
        "description": "Only show checks that belong to a specific organization ID.",
        "required": true,
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of checks",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Checks"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks",
    "operation": "post",
    "operationId": "CreateCheck",
    "basicAuth": false,
    "summary": "Add new check",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "Check to create",
      "required": true,
      "mediaType": "application/json",
      "type": "PostCheck"
    },
    "responses": [
      {
        "code": "201",
        "description": "Check created",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Check"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}",
    "operation": "get",
    "operationId": "GetChecksID",
    "basicAuth": false,
    "summary": "Retrieve a check",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The check requested",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Check"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}",
    "operation": "put",
    "operationId": "PutChecksID",
    "basicAuth": false,
    "summary": "Update a check",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Check update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "Check"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated check",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Check"
          }
        ]
      },
      {
        "code": "404",
        "description": "The check was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}",
    "operation": "patch",
    "operationId": "PatchChecksID",
    "basicAuth": false,
    "summary": "Update a check",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Check update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "CheckPatch"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated check",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Check"
          }
        ]
      },
      {
        "code": "404",
        "description": "The check was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}",
    "operation": "delete",
    "operationId": "DeleteChecksID",
    "basicAuth": false,
    "summary": "Delete a check",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "The check was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}/labels",
    "operation": "get",
    "operationId": "GetChecksIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a check",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of all labels for a check",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}/labels",
    "operation": "post",
    "operationId": "PostChecksIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a check",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Label to add",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "The label was added to the check",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteChecksIDLabelsID",
    "basicAuth": false,
    "summary": "Delete label from a check",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The ID of the label to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Check or label not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules",
    "operation": "get",
    "operationId": "GetNotificationRules",
    "basicAuth": false,
    "summary": "List all notification rules",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "offset",
        "description": "The offset for pagination.\nThe number of records to skip.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "limit",
        "description": "Limits the number of records returned. Default is `20`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "orgID",
        "description": "Only show notification rules that belong to a specific organization ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "checkID",
        "description": "Only show notifications that belong to the specific check ID.",
        "type": "string"
      },
      {
        "name": "tag",
        "description": "Only return notification rules that \"would match\" statuses which contain the tag key value pairs provided.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of notification rules",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationRules"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules",
    "operation": "post",
    "operationId": "CreateNotificationRule",
    "basicAuth": false,
    "summary": "Add a notification rule",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "Notification rule to create",
      "required": true,
      "mediaType": "application/json",
      "type": "PostNotificationRule"
    },
    "responses": [
      {
        "code": "201",
        "description": "Notification rule created",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationRule"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/checks/{checkID}/query",
    "operation": "get",
    "operationId": "GetChecksIDQuery",
    "basicAuth": false,
    "summary": "Retrieve a check query",
    "positionalParams": [
      {
        "name": "checkID",
        "description": "The check ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The check query requested",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "FluxResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Invalid request",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "404",
        "description": "Check not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}",
    "operation": "get",
    "operationId": "GetNotificationRulesID",
    "basicAuth": false,
    "summary": "Retrieve a notification rule",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The notification rule requested",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationRule"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}",
    "operation": "put",
    "operationId": "PutNotificationRulesID",
    "basicAuth": false,
    "summary": "Update a notification rule",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Notification rule update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "NotificationRule"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated notification rule",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationRule"
          }
        ]
      },
      {
        "code": "404",
        "description": "The notification rule was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}",
    "operation": "patch",
    "operationId": "PatchNotificationRulesID",
    "basicAuth": false,
    "summary": "Update a notification rule",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Notification rule update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "NotificationRuleUpdate"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated notification rule",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationRule"
          }
        ]
      },
      {
        "code": "404",
        "description": "The notification rule was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}",
    "operation": "delete",
    "operationId": "DeleteNotificationRulesID",
    "basicAuth": false,
    "summary": "Delete a notification rule",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "The check was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}/labels",
    "operation": "get",
    "operationId": "GetNotificationRulesIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a notification rule",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of all labels for a notification rule",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}/labels",
    "operation": "post",
    "operationId": "PostNotificationRuleIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a notification rule",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Label to add",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "The label was added to the notification rule",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteNotificationRulesIDLabelsID",
    "basicAuth": false,
    "summary": "Delete label from a notification rule",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The ID of the label to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Rule or label not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationRules/{ruleID}/query",
    "operation": "get",
    "operationId": "GetNotificationRulesIDQuery",
    "basicAuth": false,
    "summary": "Retrieve a notification rule query",
    "positionalParams": [
      {
        "name": "ruleID",
        "description": "The notification rule ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The notification rule query requested",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "FluxResponse"
          }
        ]
      },
      {
        "code": "400",
        "description": "Invalid request",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "404",
        "description": "Notification rule not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints",
    "operation": "get",
    "operationId": "GetNotificationEndpoints",
    "basicAuth": false,
    "summary": "List all notification endpoints",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "offset",
        "description": "The offset for pagination.\nThe number of records to skip.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "limit",
        "description": "Limits the number of records returned. Default is `20`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "orgID",
        "description": "Only show notification endpoints that belong to specific organization ID.",
        "required": true,
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of notification endpoints",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationEndpoints"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints",
    "operation": "post",
    "operationId": "CreateNotificationEndpoint",
    "basicAuth": false,
    "summary": "Add a notification endpoint",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "Notification endpoint to create",
      "required": true,
      "mediaType": "application/json",
      "type": "PostNotificationEndpoint"
    },
    "responses": [
      {
        "code": "201",
        "description": "Notification endpoint created",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationEndpoint"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints/{endpointID}",
    "operation": "get",
    "operationId": "GetNotificationEndpointsID",
    "basicAuth": false,
    "summary": "Retrieve a notification endpoint",
    "positionalParams": [
      {
        "name": "endpointID",
        "description": "The notification endpoint ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The notification endpoint requested",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationEndpoint"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints/{endpointID}",
    "operation": "put",
    "operationId": "PutNotificationEndpointsID",
    "basicAuth": false,
    "summary": "Update a notification endpoint",
    "positionalParams": [
      {
        "name": "endpointID",
        "description": "The notification endpoint ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "A new notification endpoint to replace the existing endpoint with",
      "required": true,
      "mediaType": "application/json",
      "type": "NotificationEndpoint"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated notification endpoint",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationEndpoint"
          }
        ]
      },
      {
        "code": "404",
        "description": "The notification endpoint was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints/{endpointID}",
    "operation": "patch",
    "operationId": "PatchNotificationEndpointsID",
    "basicAuth": false,
    "summary": "Update a notification endpoint",
    "positionalParams": [
      {
        "name": "endpointID",
        "description": "The notification endpoint ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Check update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "NotificationEndpointUpdate"
    },
    "responses": [
      {
        "code": "200",
        "description": "An updated notification endpoint",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "NotificationEndpoint"
          }
        ]
      },
      {
        "code": "404",
        "description": "The notification endpoint was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints/{endpointID}",
    "operation": "delete",
    "operationId": "DeleteNotificationEndpointsID",
    "basicAuth": false,
    "summary": "Delete a notification endpoint",
    "positionalParams": [
      {
        "name": "endpointID",
        "description": "The notification endpoint ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "The endpoint was not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints/{endpointID}/labels",
    "operation": "get",
    "operationId": "GetNotificationEndpointsIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a notification endpoint",
    "positionalParams": [
      {
        "name": "endpointID",
        "description": "The notification endpoint ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of all labels for a notification endpoint",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints/{endpointID}/labels",
    "operation": "post",
    "operationId": "PostNotificationEndpointIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a notification endpoint",
    "positionalParams": [
      {
        "name": "endpointID",
        "description": "The notification endpoint ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Label to add",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "The label was added to the notification endpoint",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/notificationEndpoints/{endpointID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteNotificationEndpointsIDLabelsID",
    "basicAuth": false,
    "summary": "Delete a label from a notification endpoint",
    "positionalParams": [
      {
        "name": "endpointID",
        "description": "The notification endpoint ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The ID of the label to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Endpoint or label not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/all",
    "operation": "get",
    "operationId": "GetDebugPprofAllProfiles",
    "basicAuth": false,
    "summary": "Retrieve all runtime profiles",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "cpu",
        "description": "Collects and returns CPU profiling data for the specified [duration](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#duration).\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) reports.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/allocs",
    "operation": "get",
    "operationId": "GetDebugPprofAllocs",
    "basicAuth": false,
    "summary": "Retrieve the memory allocations runtime profile",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "debug",
        "description": "- `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n",
        "type": "number"
      },
      {
        "name": "seconds",
        "description": "Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible\nwith [pprof](https://github.com/google/pprof) analysis and visualization tools.\nIf debug is enabled (`?debug=1`), response body contains a human-readable profile.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          },
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/block",
    "operation": "get",
    "operationId": "GetDebugPprofBlock",
    "basicAuth": false,
    "summary": "Retrieve the block runtime profile",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "debug",
        "description": "- `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n",
        "type": "number"
      },
      {
        "name": "seconds",
        "description": "Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible\nwith [pprof](https://github.com/google/pprof) analysis and visualization tools.\nIf debug is enabled (`?debug=1`), response body contains a human-readable profile.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          },
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/cmdline",
    "operation": "get",
    "operationId": "GetDebugPprofCmdline",
    "basicAuth": false,
    "summary": "Retrieve the command line invocation",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Command line invocation.",
        "mediaTypes": [
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/goroutine",
    "operation": "get",
    "operationId": "GetDebugPprofGoroutine",
    "basicAuth": false,
    "summary": "Retrieve the goroutines runtime profile",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "debug",
        "description": "- `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as\n       human-readable text with comments that translate addresses to\n       function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n",
        "type": "number"
      },
      {
        "name": "seconds",
        "description": "Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible\nwith [pprof](https://github.com/google/pprof) analysis and visualization tools.\nIf debug is enabled (`?debug=1`), response body contains a human-readable profile.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          },
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/heap",
    "operation": "get",
    "operationId": "GetDebugPprofHeap",
    "basicAuth": false,
    "summary": "Retrieve the heap runtime profile",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "debug",
        "description": "- `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n",
        "type": "number"
      },
      {
        "name": "seconds",
        "description": "Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n",
        "type": "string"
      },
      {
        "name": "gc",
        "description": "- `0`: (Default) don't force garbage collection before sampling.\n- `1`: Force garbage collection before sampling.\n",
        "type": "number"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible\nwith [pprof](https://github.com/google/pprof) analysis and visualization tools.\nIf debug is enabled (`?debug=1`), response body contains a human-readable profile.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          },
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/mutex",
    "operation": "get",
    "operationId": "GetDebugPprofMutex",
    "basicAuth": false,
    "summary": "Retrieve the mutual exclusion (mutex) runtime profile",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "debug",
        "description": "- `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n",
        "type": "number"
      },
      {
        "name": "seconds",
        "description": "Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible\nwith [pprof](https://github.com/google/pprof) analysis and visualization tools.\nIf debug is enabled (`?debug=1`), response body contains a human-readable profile.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          },
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/profile",
    "operation": "get",
    "operationId": "GetDebugPprofProfile",
    "basicAuth": false,
    "summary": "Retrieve the CPU runtime profile",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "seconds",
        "description": "Number of seconds to collect profile data. Default is `30` seconds.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible\nwith [pprof](https://github.com/google/pprof) analysis and visualization tools.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/threadcreate",
    "operation": "get",
    "operationId": "GetDebugPprofThreadCreate",
    "basicAuth": false,
    "summary": "Retrieve the threadcreate runtime profile",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "debug",
        "description": "- `0`: (Default) Return the report as a gzip-compressed protocol buffer.\n- `1`: Return a response body with the report formatted as human-readable text.\n  The report contains comments that translate addresses to function names and line numbers for debugging.\n\n`debug=1` is mutually exclusive with the `seconds` query parameter.\n",
        "type": "number"
      },
      {
        "name": "seconds",
        "description": "Number of seconds to collect statistics.\n\n`seconds` is mutually exclusive with `debug=1`.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Go runtime profile](https://pkg.go.dev/runtime/pprof) report compatible\nwith [pprof](https://github.com/google/pprof) analysis and visualization tools.\nIf debug is enabled (`?debug=1`), response body contains a human-readable profile.\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          },
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/debug/pprof/trace",
    "operation": "get",
    "operationId": "GetDebugPprofTrace",
    "basicAuth": false,
    "summary": "Retrieve the runtime execution trace",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "seconds",
        "description": "Number of seconds to collect profile data.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "[Trace file](https://pkg.go.dev/runtime/trace) compatible\nwith the [Golang `trace` command](https://pkg.go.dev/cmd/trace).\n",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/health",
    "operation": "get",
    "operationId": "GetHealth",
    "basicAuth": false,
    "summary": "Retrieve the health of the instance",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The instance is healthy.\nThe response body contains the health check items and status.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "HealthCheck"
          }
        ]
      },
      {
        "code": "503",
        "description": "The instance is unhealthy.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "HealthCheck"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/metrics",
    "operation": "get",
    "operationId": "GetMetrics",
    "basicAuth": false,
    "summary": "Retrieve workload performance metrics",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains metrics in\n[Prometheus plain-text exposition format](https://prometheus.io/docs/instrumenting/exposition_formats)\nMetrics contain a name, an optional set of key-value pairs, and a value.\n\nThe following descriptors precede each metric:\n\n- `HELP`: description of the metric\n- `TYPE`: [Prometheus metric type](https://prometheus.io/docs/concepts/metric_types/) (`counter`, `gauge`, `histogram`, or `summary`)\n",
        "mediaTypes": [
          {
            "mediaType": "text/plain",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/ready",
    "operation": "get",
    "operationId": "GetReady",
    "basicAuth": false,
    "summary": "Get the readiness of an instance at startup",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The instance is ready",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Ready"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/users",
    "operation": "get",
    "operationId": "GetUsers",
    "basicAuth": false,
    "summary": "List users",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "offset",
        "description": "The offset for pagination.\nThe number of records to skip.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "limit",
        "description": "Limits the number of records returned. Default is `20`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "after",
        "description": "Resource ID to seek from. Results are not inclusive of this ID. Use `after` instead of `offset`.\n",
        "required": false,
        "type": "string"
      },
      {
        "name": "name",
        "type": "string"
      },
      {
        "name": "id",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response contains a list of `users`.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Users"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\n\nThe error may indicate one of the following problems:\n\n- The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n- You passed a parameter combination that InfluxDB doesn't support.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/users",
    "operation": "post",
    "operationId": "PostUsers",
    "basicAuth": false,
    "summary": "Create a user",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The user to create.",
      "required": true,
      "mediaType": "application/json",
      "type": "User"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success.\nThe response contains the newly created user.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "UserResponse"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\n\nThe error may indicate one of the following problems:\n\n- The request body isn't valid--the request is well-formed, but InfluxDB can't process it due to semantic errors.\n- You passed a parameter combination that InfluxDB doesn't support.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/users/{userID}",
    "operation": "get",
    "operationId": "GetUsersID",
    "basicAuth": false,
    "summary": "Retrieve a user",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The user ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "User details",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "UserResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/users/{userID}",
    "operation": "patch",
    "operationId": "PatchUsersID",
    "basicAuth": false,
    "summary": "Update a user",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the user to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "User"
    },
    "responses": [
      {
        "code": "200",
        "description": "User updated",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "UserResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/users/{userID}",
    "operation": "delete",
    "operationId": "DeleteUsersID",
    "basicAuth": false,
    "summary": "Delete a user",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of the user to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "User deleted",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/setup",
    "operation": "get",
    "operationId": "GetSetup",
    "basicAuth": false,
    "summary": "Check if database has default user, org, bucket",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "allowed true or false",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "IsOnboarding"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/setup",
    "operation": "post",
    "operationId": "PostSetup",
    "basicAuth": false,
    "summary": "Set up initial user, org and bucket",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Source to create",
      "required": true,
      "mediaType": "application/json",
      "type": "OnboardingRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Created default user, bucket, org",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "OnboardingResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/authorizations",
    "operation": "get",
    "operationId": "GetAuthorizations",
    "basicAuth": false,
    "summary": "List authorizations",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "userID",
        "description": "A user ID.\nOnly returns authorizations scoped to this user.\n",
        "type": "string"
      },
      {
        "name": "user",
        "description": "A user name.\nOnly returns authorizations scoped to this user.\n",
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "An organization ID. Only returns authorizations that belong to this organization.",
        "type": "string"
      },
      {
        "name": "org",
        "description": "An organization name.\nOnly returns authorizations that belong to this organization.\n",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains a list of authorizations.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Authorizations"
          }
        ]
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/authorizations",
    "operation": "post",
    "operationId": "PostAuthorizations",
    "basicAuth": false,
    "summary": "Create an authorization",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The authorization to create.",
      "required": true,
      "mediaType": "application/json",
      "type": "AuthorizationPostRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Created. The response body contains the newly created authorization.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Authorization"
          }
        ]
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/authorizations/{authID}",
    "operation": "get",
    "operationId": "GetAuthorizationsID",
    "basicAuth": false,
    "summary": "Retrieve an authorization",
    "positionalParams": [
      {
        "name": "authID",
        "description": "The ID of the authorization to get.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Authorization details",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Authorization"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/authorizations/{authID}",
    "operation": "patch",
    "operationId": "PatchAuthorizationsID",
    "basicAuth": false,
    "summary": "Update an authorization to be active or inactive",
    "positionalParams": [
      {
        "name": "authID",
        "description": "The ID of the authorization to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Authorization to update",
      "required": true,
      "mediaType": "application/json",
      "type": "AuthorizationUpdateRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "The active or inactive authorization",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Authorization"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/authorizations/{authID}",
    "operation": "delete",
    "operationId": "DeleteAuthorizationsID",
    "basicAuth": false,
    "summary": "Delete an authorization",
    "positionalParams": [
      {
        "name": "authID",
        "description": "The ID of the authorization to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Authorization deleted",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables",
    "operation": "get",
    "operationId": "GetVariables",
    "basicAuth": false,
    "summary": "List all variables",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "org",
        "description": "The name of the organization.",
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "The organization ID.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of variables for an organization",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Variables"
          }
        ]
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables",
    "operation": "post",
    "operationId": "PostVariables",
    "basicAuth": false,
    "summary": "Create a variable",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Variable to create",
      "required": true,
      "mediaType": "application/json",
      "type": "Variable"
    },
    "responses": [
      {
        "code": "201",
        "description": "Variable created",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Variable"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables/{variableID}",
    "operation": "get",
    "operationId": "GetVariablesID",
    "basicAuth": false,
    "summary": "Retrieve a variable",
    "positionalParams": [
      {
        "name": "variableID",
        "description": "The variable ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Variable found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Variable"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables/{variableID}",
    "operation": "put",
    "operationId": "PutVariablesID",
    "basicAuth": false,
    "summary": "Replace a variable",
    "positionalParams": [
      {
        "name": "variableID",
        "description": "The variable ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Variable to replace",
      "required": true,
      "mediaType": "application/json",
      "type": "Variable"
    },
    "responses": [
      {
        "code": "200",
        "description": "Variable updated",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Variable"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables/{variableID}",
    "operation": "patch",
    "operationId": "PatchVariablesID",
    "basicAuth": false,
    "summary": "Update a variable",
    "positionalParams": [
      {
        "name": "variableID",
        "description": "The variable ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Variable update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "Variable"
    },
    "responses": [
      {
        "code": "200",
        "description": "Variable updated",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Variable"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/variables/{variableID}",
    "operation": "delete",
    "operationId": "DeleteVariablesID",
    "basicAuth": false,
    "summary": "Delete a variable",
    "positionalParams": [
      {
        "name": "variableID",
        "description": "The variable ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Variable deleted",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/sources",
    "operation": "get",
    "operationId": "GetSources",
    "basicAuth": false,
    "summary": "List all sources",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "org",
        "description": "The name of the organization.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of sources",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Sources"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/sources",
    "operation": "post",
    "operationId": "PostSources",
    "basicAuth": false,
    "summary": "Create a source",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Source to create",
      "required": true,
      "mediaType": "application/json",
      "type": "Source"
    },
    "responses": [
      {
        "code": "201",
        "description": "Created Source",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Source"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/sources/{sourceID}",
    "operation": "get",
    "operationId": "GetSourcesID",
    "basicAuth": false,
    "summary": "Retrieve a source",
    "positionalParams": [
      {
        "name": "sourceID",
        "description": "The source ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A source",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Source"
          }
        ]
      },
      {
        "code": "404",
        "description": "Source not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/sources/{sourceID}",
    "operation": "patch",
    "operationId": "PatchSourcesID",
    "basicAuth": false,
    "summary": "Update a Source",
    "positionalParams": [
      {
        "name": "sourceID",
        "description": "The source ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Source update",
      "required": true,
      "mediaType": "application/json",
      "type": "Source"
    },
    "responses": [
      {
        "code": "200",
        "description": "Created Source",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Source"
          }
        ]
      },
      {
        "code": "404",
        "description": "Source not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/sources/{sourceID}",
    "operation": "delete",
    "operationId": "DeleteSourcesID",
    "basicAuth": false,
    "summary": "Delete a source",
    "positionalParams": [
      {
        "name": "sourceID",
        "description": "The source ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "View not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/sources/{sourceID}/health",
    "operation": "get",
    "operationId": "GetSourcesIDHealth",
    "basicAuth": false,
    "summary": "Get the health of a source",
    "positionalParams": [
      {
        "name": "sourceID",
        "description": "The source ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The source is healthy",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "HealthCheck"
          }
        ]
      },
      {
        "code": "503",
        "description": "The source is not healthy",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "HealthCheck"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/sources/{sourceID}/buckets",
    "operation": "get",
    "operationId": "GetSourcesIDBuckets",
    "basicAuth": false,
    "summary": "Get buckets in a source",
    "positionalParams": [
      {
        "name": "sourceID",
        "description": "The source ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "org",
        "description": "The name of the organization.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A source",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Buckets"
          }
        ]
      },
      {
        "code": "404",
        "description": "Source not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers",
    "operation": "get",
    "operationId": "GetScrapers",
    "basicAuth": false,
    "summary": "List all scraper targets",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "name",
        "description": "Specifies the name of the scraper target.",
        "type": "string"
      },
      {
        "name": "id",
        "description": "List of scraper target IDs to return. If both `id` and `owner` are specified, only `id` is used.",
        "type": "any"
      },
      {
        "name": "orgID",
        "description": "Specifies the organization ID of the scraper target.",
        "type": "string"
      },
      {
        "name": "org",
        "description": "Specifies the organization name of the scraper target.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "All scraper targets",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ScraperTargetResponses"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers",
    "operation": "post",
    "operationId": "PostScrapers",
    "basicAuth": false,
    "summary": "Create a scraper target",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Scraper target to create",
      "required": true,
      "mediaType": "application/json",
      "type": "ScraperTargetRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Scraper target created",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ScraperTargetResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Internal server error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}",
    "operation": "get",
    "operationId": "GetScrapersID",
    "basicAuth": false,
    "summary": "Retrieve a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The identifier of the scraper target.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "The scraper target",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ScraperTargetResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Internal server error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}",
    "operation": "patch",
    "operationId": "PatchScrapersID",
    "basicAuth": false,
    "summary": "Update a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The identifier of the scraper target.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Scraper target update to apply",
      "required": true,
      "mediaType": "application/json",
      "type": "ScraperTargetRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "Scraper target updated",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ScraperTargetResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Internal server error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}",
    "operation": "delete",
    "operationId": "DeleteScrapersID",
    "basicAuth": false,
    "summary": "Delete a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The identifier of the scraper target.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Scraper target deleted",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Internal server error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/labels",
    "operation": "get",
    "operationId": "GetScrapersIDLabels",
    "basicAuth": false,
    "summary": "List all labels for a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of labels for a scraper target.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelsResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/labels",
    "operation": "post",
    "operationId": "PostScrapersIDLabels",
    "basicAuth": false,
    "summary": "Add a label to a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Label to add",
      "required": true,
      "mediaType": "application/json",
      "type": "LabelMapping"
    },
    "responses": [
      {
        "code": "201",
        "description": "The newly added label",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "LabelResponse"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/labels/{labelID}",
    "operation": "delete",
    "operationId": "DeleteScrapersIDLabelsID",
    "basicAuth": false,
    "summary": "Delete a label from a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "labelID",
        "description": "The label ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Delete has been accepted",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Scraper target not found",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/members",
    "operation": "get",
    "operationId": "GetScrapersIDMembers",
    "basicAuth": false,
    "summary": "List all users with member privileges for a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of scraper target members",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMembers"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/members",
    "operation": "post",
    "operationId": "PostScrapersIDMembers",
    "basicAuth": false,
    "summary": "Add a member to a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User to add as member",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Member added to scraper targets",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceMember"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/members/{userID}",
    "operation": "delete",
    "operationId": "DeleteScrapersIDMembersID",
    "basicAuth": false,
    "summary": "Remove a member from a scraper target",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of member to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Member removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/owners",
    "operation": "get",
    "operationId": "GetScrapersIDOwners",
    "basicAuth": false,
    "summary": "List all owners of a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "A list of scraper target owners",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwners"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/owners",
    "operation": "post",
    "operationId": "PostScrapersIDOwners",
    "basicAuth": false,
    "summary": "Add an owner to a scraper target",
    "positionalParams": [
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "User to add as owner",
      "required": true,
      "mediaType": "application/json",
      "type": "AddResourceMemberRequestBody"
    },
    "responses": [
      {
        "code": "201",
        "description": "Scraper target owner added",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "ResourceOwner"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scrapers/{scraperTargetID}/owners/{userID}",
    "operation": "delete",
    "operationId": "DeleteScrapersIDOwnersID",
    "basicAuth": false,
    "summary": "Remove an owner from a scraper target",
    "positionalParams": [
      {
        "name": "userID",
        "description": "The ID of owner to remove.",
        "required": true,
        "type": "string"
      },
      {
        "name": "scraperTargetID",
        "description": "The scraper target ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Owner removed",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/backup/kv",
    "operation": "get",
    "operationId": "GetBackupKV",
    "basicAuth": false,
    "summary": "Download snapshot of metadata stored in the server's embedded KV store. Don't use with InfluxDB versions greater than InfluxDB 2.1.x.",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response contains a snapshot of KV metadata.",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/backup/metadata",
    "operation": "get",
    "operationId": "GetBackupMetadata",
    "basicAuth": false,
    "summary": "Download snapshot of all metadata in the server",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Accept-Encoding",
        "description": "Indicates the content encoding (usually a compression algorithm) that the client can understand.",
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Snapshot of metadata",
        "mediaTypes": [
          {
            "mediaType": "multipart/mixed",
            "type": "MetadataBackup"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/backup/shards/{shardID}",
    "operation": "get",
    "operationId": "GetBackupShardId",
    "basicAuth": false,
    "summary": "Download snapshot of all TSM data in a shard",
    "positionalParams": [
      {
        "name": "shardID",
        "description": "The shard ID.",
        "required": true,
        "type": "number"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Accept-Encoding",
        "description": "Indicates the content encoding (usually a compression algorithm) that the client can understand.",
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "since",
        "description": "The earliest time [RFC3339 date/time format](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#rfc3339-timestamp) to include in the snapshot.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "TSM snapshot.",
        "mediaTypes": [
          {
            "mediaType": "application/octet-stream",
            "type": "string"
          }
        ]
      },
      {
        "code": "404",
        "description": "Shard not found.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/restore/kv",
    "operation": "post",
    "operationId": "PostRestoreKV",
    "basicAuth": false,
    "summary": "Overwrite the embedded KV store on the server with a backed-up snapshot.",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Content-Encoding",
        "description": "The value tells InfluxDB what compression is applied to the line protocol in the request payload.\nTo make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.\n",
        "type": "string"
      },
      {
        "name": "Content-Type",
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Full KV snapshot.",
      "required": true,
      "mediaType": "text/plain",
      "type": "string"
    },
    "responses": [
      {
        "code": "200",
        "description": "KV store successfully overwritten.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** token is the root token for the instance after restore (this is overwritten during the restore) */\n  token?: string;\n}"
          }
        ]
      },
      {
        "code": "204",
        "description": "KV store successfully overwritten.",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/restore/sql",
    "operation": "post",
    "operationId": "PostRestoreSQL",
    "basicAuth": false,
    "summary": "Overwrite the embedded SQL store on the server with a backed-up snapshot.",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Content-Encoding",
        "description": "The value tells InfluxDB what compression is applied to the line protocol in the request payload.\nTo make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.\n",
        "type": "string"
      },
      {
        "name": "Content-Type",
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Full SQL snapshot.",
      "required": true,
      "mediaType": "text/plain",
      "type": "string"
    },
    "responses": [
      {
        "code": "204",
        "description": "SQL store successfully overwritten.",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/restore/bucket/{bucketID}",
    "operation": "post",
    "operationId": "PostRestoreBucketID",
    "basicAuth": false,
    "summary": "Overwrite storage metadata for a bucket with shard info from a backup.",
    "positionalParams": [
      {
        "name": "bucketID",
        "description": "The bucket ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Content-Type",
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Database info serialized as protobuf.",
      "required": true,
      "mediaType": "text/plain",
      "type": "string"
    },
    "responses": [
      {
        "code": "200",
        "description": "ID mappings for shards in bucket.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "string"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/restore/bucketMetadata",
    "operation": "post",
    "operationId": "PostRestoreBucketMetadata",
    "basicAuth": false,
    "summary": "Create a new bucket pre-seeded with shard info from a backup.",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Metadata manifest for a bucket.",
      "required": true,
      "mediaType": "application/json",
      "type": "BucketMetadataManifest"
    },
    "responses": [
      {
        "code": "201",
        "description": "ID mappings for shards in new bucket.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "RestoredBucketMappings"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/restore/shards/{shardID}",
    "operation": "post",
    "operationId": "PostRestoreShardId",
    "basicAuth": false,
    "summary": "Restore a TSM snapshot into a shard.",
    "positionalParams": [
      {
        "name": "shardID",
        "description": "The shard ID.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      },
      {
        "name": "Content-Encoding",
        "description": "The value tells InfluxDB what compression is applied to the line protocol in the request payload.\nTo make an API request with a GZIP payload, send `Content-Encoding: gzip` as a request header.\n",
        "type": "string"
      },
      {
        "name": "Content-Type",
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "TSM snapshot.",
      "required": true,
      "mediaType": "text/plain",
      "type": "string"
    },
    "responses": [
      {
        "code": "204",
        "description": "TSM snapshot successfully restored.",
        "mediaTypes": []
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/config",
    "operation": "get",
    "operationId": "GetConfig",
    "basicAuth": false,
    "summary": "Retrieve runtime configuration",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the active runtime configuration of the InfluxDB instance.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Config"
          }
        ]
      },
      {
        "code": "401",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/remotes",
    "operation": "get",
    "operationId": "GetRemoteConnections",
    "basicAuth": false,
    "summary": "List all remote connections",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "The organization ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "name",
        "type": "string"
      },
      {
        "name": "remoteURL",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "List of remote connections",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "RemoteConnections"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/remotes",
    "operation": "post",
    "operationId": "PostRemoteConnection",
    "basicAuth": false,
    "summary": "Register a new remote connection",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "required": true,
      "mediaType": "application/json",
      "type": "RemoteConnectionCreationRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Remote connection saved",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "RemoteConnection"
          }
        ]
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/remotes/{remoteID}",
    "operation": "get",
    "operationId": "GetRemoteConnectionByID",
    "basicAuth": false,
    "summary": "Retrieve a remote connection",
    "positionalParams": [
      {
        "name": "remoteID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Remote connection",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "RemoteConnection"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/remotes/{remoteID}",
    "operation": "patch",
    "operationId": "PatchRemoteConnectionByID",
    "basicAuth": false,
    "summary": "Update a remote connection",
    "positionalParams": [
      {
        "name": "remoteID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "required": true,
      "mediaType": "application/json",
      "type": "RemoteConnectionUpdateRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "Updated information saved",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "RemoteConnection"
          }
        ]
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/remotes/{remoteID}",
    "operation": "delete",
    "operationId": "DeleteRemoteConnectionByID",
    "basicAuth": false,
    "summary": "Delete a remote connection",
    "positionalParams": [
      {
        "name": "remoteID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Remote connection info deleted.",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/replications",
    "operation": "get",
    "operationId": "GetReplications",
    "basicAuth": false,
    "summary": "List all replications",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "orgID",
        "description": "The organization ID.",
        "required": true,
        "type": "string"
      },
      {
        "name": "name",
        "type": "string"
      },
      {
        "name": "remoteID",
        "type": "string"
      },
      {
        "name": "localBucketID",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "List of replications",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Replications"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/replications",
    "operation": "post",
    "operationId": "PostReplication",
    "basicAuth": false,
    "summary": "Register a new replication",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "validate",
        "description": "If true, validate the replication, but don't save it.",
        "type": "any"
      }
    ],
    "bodyParam": {
      "required": true,
      "mediaType": "application/json",
      "type": "ReplicationCreationRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Replication saved",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Replication"
          }
        ]
      },
      {
        "code": "204",
        "description": "Replication validated, but not saved",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/replications/{replicationID}",
    "operation": "get",
    "operationId": "GetReplicationByID",
    "basicAuth": false,
    "summary": "Retrieve a replication",
    "positionalParams": [
      {
        "name": "replicationID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Replication",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Replication"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/replications/{replicationID}",
    "operation": "patch",
    "operationId": "PatchReplicationByID",
    "basicAuth": false,
    "summary": "Update a replication",
    "positionalParams": [
      {
        "name": "replicationID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "validate",
        "description": "If true, validate the updated information, but don't save it.",
        "type": "any"
      }
    ],
    "bodyParam": {
      "required": true,
      "mediaType": "application/json",
      "type": "ReplicationUpdateRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "Updated information saved",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Replication"
          }
        ]
      },
      {
        "code": "204",
        "description": "Updated replication validated, but not saved",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/replications/{replicationID}",
    "operation": "delete",
    "operationId": "DeleteReplicationByID",
    "basicAuth": false,
    "summary": "Delete a replication",
    "positionalParams": [
      {
        "name": "replicationID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Replication deleted.",
        "mediaTypes": []
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/replications/{replicationID}/validate",
    "operation": "post",
    "operationId": "PostValidateReplicationByID",
    "basicAuth": false,
    "summary": "Validate a replication",
    "positionalParams": [
      {
        "name": "replicationID",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Replication is valid",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards",
    "operation": "get",
    "operationId": "GetDashboards",
    "basicAuth": false,
    "summary": "List all dashboards",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "offset",
        "description": "The offset for pagination.\nThe number of records to skip.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "limit",
        "description": "Limits the number of records returned. Default is `20`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "descending",
        "required": false,
        "type": "any"
      },
      {
        "name": "owner",
        "description": "A user identifier. Returns only dashboards where this user has the `owner` role.",
        "type": "string"
      },
      {
        "name": "sortBy",
        "description": "The column to sort by.",
        "type": "string"
      },
      {
        "name": "id",
        "description": "A list of dashboard identifiers. Returns only the listed dashboards. If both `id` and `owner` are specified, only `id` is used.",
        "type": "any"
      },
      {
        "name": "orgID",
        "description": "The identifier of the organization.",
        "type": "string"
      },
      {
        "name": "org",
        "description": "The name of the organization.",
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "All dashboards",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Dashboards"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/dashboards",
    "operation": "post",
    "operationId": "PostDashboards",
    "basicAuth": false,
    "summary": "Create a dashboard",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "Dashboard to create",
      "required": true,
      "mediaType": "application/json",
      "type": "CreateDashboardRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Added dashboard",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Dashboard | DashboardWithViewProperties"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks",
    "operation": "get",
    "operationId": "GetTasks",
    "basicAuth": false,
    "summary": "List tasks",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [
      {
        "name": "name",
        "description": "A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) name.\nOnly returns tasks with the specified name.\nDifferent tasks may have the same name.\n",
        "type": "string"
      },
      {
        "name": "after",
        "description": "A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) ID.\nOnly returns tasks created after the specified task.\n",
        "type": "string"
      },
      {
        "name": "user",
        "description": "A [user](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#user) ID.\nOnly returns tasks owned by the specified user.\n",
        "type": "string"
      },
      {
        "name": "org",
        "description": "An [organization](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization) name.\nOnly returns tasks owned by the specified organization.\n",
        "type": "string"
      },
      {
        "name": "orgID",
        "description": "An [organization](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#organization) ID.\nOnly returns tasks owned by the specified organization.\n",
        "type": "string"
      },
      {
        "name": "status",
        "description": "A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) status.\nOnly returns tasks that have the specified status (`active` or `inactive`).\n",
        "type": "string"
      },
      {
        "name": "limit",
        "description": "The maximum number of [tasks](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) to return.\nDefault is `100`.\nThe minimum is `1` and the maximum is `500`.\n\nTo reduce the payload size, combine _`type=basic`_ and _`limit`_ (see _Request samples_).\nFor more information about the `basic` response, see the _`type`_ parameter.\n",
        "type": "number"
      },
      {
        "name": "type",
        "description": "A [task](https://docs.influxdata.com/influxdb/v2.3/reference/glossary/#task) type (`basic` or `system`).\nDefault is `system`.\nSpecifies the level of detail for tasks in the response.\nThe default (`system`) response contains all the metadata properties for tasks.\nTo reduce the response size, pass `basic` to omit some task properties (`flux`, `createdAt`, `updatedAt`).\n",
        "required": false,
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the list of tasks.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Tasks"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks",
    "operation": "post",
    "operationId": "PostTasks",
    "basicAuth": false,
    "summary": "Create a task",
    "positionalParams": [],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "The task to create.",
      "required": true,
      "mediaType": "application/json",
      "type": "TaskCreateRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success. The response body contains a `tasks` list with the task.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Task"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}",
    "operation": "get",
    "operationId": "GetTasksID",
    "basicAuth": false,
    "summary": "Retrieve a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to retrieve.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the task.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Task"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}",
    "operation": "patch",
    "operationId": "PatchTasksID",
    "basicAuth": false,
    "summary": "Update a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to update.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": {
      "description": "An object that contains updated task properties to apply.",
      "required": true,
      "mediaType": "application/json",
      "type": "TaskUpdateRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the updated task.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Task"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/tasks/{taskID}",
    "operation": "delete",
    "operationId": "DeleteTasksID",
    "basicAuth": false,
    "summary": "Delete a task",
    "positionalParams": [
      {
        "name": "taskID",
        "description": "The ID of the task to delete.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [
      {
        "name": "Zap-Trace-Span",
        "description": "OpenTracing span context",
        "required": false,
        "type": "string"
      }
    ],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success. The task and runs are deleted. Scheduled runs are canceled.",
        "mediaTypes": []
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\nA requested resource was not found.\nThe response body contains the requested resource type and the name value\n(if you passed it)--for example:\n\n- `\"organization name \\\"my-org\\\" not found\"`\n- `\"organization not found\"`: indicates you passed an ID that did not match\n   an organization.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts",
    "operation": "get",
    "operationId": "GetScripts",
    "basicAuth": false,
    "summary": "List scripts",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [
      {
        "name": "limit",
        "description": "The maximum number of scripts to return. Default is `100`.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "offset",
        "description": "The offset for pagination.\nSpecifies the number of records to skip in the result.\n",
        "required": false,
        "type": "number"
      },
      {
        "name": "name",
        "description": "The name of the script.",
        "required": false,
        "type": "string"
      },
      {
        "name": "labelNames",
        "description": "A list of label names.\nOnly returns scripts that have all the specified labels.\nTo retrieve a script, each name you pass in `labelNames` must exactly\nmatch the label for a script.\n",
        "required": false,
        "type": "any"
      },
      {
        "name": "labelContains",
        "description": "A part of the label name.\nReturns scripts that have a label that contains the specified phrase.\n",
        "required": false,
        "type": "string"
      }
    ],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the list of scripts.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Scripts"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nInfluxDB is unable to parse the request.\nThe response body contains detail about the error.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts",
    "operation": "post",
    "operationId": "PostScripts",
    "basicAuth": false,
    "summary": "Create a script",
    "positionalParams": [],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "The script to create.",
      "required": true,
      "mediaType": "application/json",
      "type": "ScriptCreateRequest"
    },
    "responses": [
      {
        "code": "201",
        "description": "Success.\nThe response body contains the script and its metadata.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Script"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "422",
        "description": "Unprocessable entity.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts/{scriptID}",
    "operation": "get",
    "operationId": "GetScriptsID",
    "basicAuth": false,
    "summary": "Retrieve a script",
    "positionalParams": [
      {
        "name": "scriptID",
        "description": "A script ID.\nSpecifies the script to retrieve.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the script.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Script"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts/{scriptID}",
    "operation": "patch",
    "operationId": "PatchScriptsID",
    "basicAuth": false,
    "summary": "Update a script",
    "positionalParams": [
      {
        "name": "scriptID",
        "description": "A script ID.\nSpecifies the script to update.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "The script update to apply.",
      "required": true,
      "mediaType": "application/json",
      "type": "ScriptUpdateRequest"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success. The response body contains the updated script.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Script"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts/{scriptID}",
    "operation": "delete",
    "operationId": "DeleteScriptsID",
    "basicAuth": false,
    "summary": "Delete a script",
    "positionalParams": [
      {
        "name": "scriptID",
        "description": "A script ID.\nSpecifies the script to delete.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": null,
    "responses": [
      {
        "code": "204",
        "description": "Success. The script is deleted.",
        "mediaTypes": []
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts/{scriptID}/invoke",
    "operation": "post",
    "operationId": "PostScriptsIDInvoke",
    "basicAuth": false,
    "summary": "Invoke a script",
    "positionalParams": [
      {
        "name": "scriptID",
        "description": "A script ID.\nSpecifies the script to execute.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "required": false,
      "mediaType": "application/json",
      "type": "ScriptInvocationParams"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the result of the script execution.\n",
        "mediaTypes": [
          {
            "mediaType": "text/csv",
            "type": "ScriptHTTPResponseData"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nInfluxDB is unable to parse the request.\nThe response body contains detail about the error.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Not found.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Unexpected error.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts/{scriptID}/labels/add",
    "operation": "patch",
    "operationId": "PatchScriptsIDAddLabels",
    "basicAuth": false,
    "summary": "Add labels to a script",
    "positionalParams": [
      {
        "name": "scriptID",
        "description": "The script ID.\nSpecifies the script to add labels to.\n",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "The labels to add to the script.",
      "required": true,
      "mediaType": "application/json",
      "type": "{\n  /** A list of label names to add. */\n  labels?: string[];\n}"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the updated script.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Script"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  },
  {
    "server": "/api/v2",
    "path": "/scripts/{scriptID}/labels/remove",
    "operation": "patch",
    "operationId": "PatchScriptsIDRemoveLabels",
    "basicAuth": false,
    "summary": "Remove labels from a script",
    "positionalParams": [
      {
        "name": "scriptID",
        "description": "A script ID. Specifies the script to remove labels from.",
        "required": true,
        "type": "string"
      }
    ],
    "headerParams": [],
    "queryParams": [],
    "bodyParam": {
      "description": "The labels to remove from the script.",
      "required": true,
      "mediaType": "application/json",
      "type": "{\n  /** A list of label names to remove. */\n  labels?: string[];\n}"
    },
    "responses": [
      {
        "code": "200",
        "description": "Success.\nThe response body contains the updated script.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Script"
          }
        ]
      },
      {
        "code": "400",
        "description": "Bad request.\nThe response body contains detail about the error.\n\n#### InfluxDB OSS\n\n- Returns this error if an incorrect value is passed for `org` or `orgID`.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "401",
        "description": "Unauthorized. The error may indicate one of the following:\n\n  * The `Authorization: Token` header is missing or malformed.\n  * The API token value is missing from the header.\n  * The token doesn't have sufficient permissions to write to this organization and bucket.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "{\n  /** The HTTP status code description. Default is `unauthorized`.\n */\n  readonly code?: \"unauthorized\";\n  /** A human-readable message that may contain detail about the error. */\n  readonly message?: string;\n}"
          }
        ]
      },
      {
        "code": "404",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "500",
        "description": "Internal server error.\nThe server encountered an unexpected situation.\n",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      },
      {
        "code": "default",
        "description": "Non 2XX error response from server.",
        "mediaTypes": [
          {
            "mediaType": "application/json",
            "type": "Error"
          }
        ]
      }
    ]
  }
]